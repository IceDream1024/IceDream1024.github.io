<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Flutter学习笔记]]></title>
    <url>%2F2019%2F01%2F23%2FFlutter%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[Flutter 开发环境搭建(Mac OS) 使用国内镜像 12345678# 用vim编辑环境变量sudo vim ~/.bash_profile# 将一下两行粘贴到bash_profileexport PUB_HOSTED_URL=https://pub.flutter-io.cnexport FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn#重新加载环境变量source ~/.bash_profile 下载Flutter SDK 点我去官网下载下载Stable channel(稳定版本)就行 解压SDK并添加SDK目录到环境变量 1234567891011121314# 自己解压到一个目录，我是在~/development 目录中存放的SDK# 解压你下载好的sdk文件unzip flutter_macos_v0.5.1-beta.zip# 添加 development 目录 或 添加到你自己创建的目录mkdir ~/development# 移动SDK到 development 目录 或 移动到你自己创建的目录mv flutter ~/development# 用vim编辑bash_profile sudo vim ~/.bash_profile# 添加一下两条，FLUTTER_HOME 请对应修改你自己的路径export FLUTTER_HOME=/Users/icedream/development/flutterexport PATH=$PATH:$FLUTTER_HOME/bin:#重新加载环境变量source ~/.bash_profile Android Studio安装 点我到Google官网下载（无需翻墙） 检查flutter环境是否正常 1flutter doctor 此处出现红叉的地方请自行百度就可以解决，等什么时候我给弄一个错误解决方案集合出来 其他操作系统请参考官网操作Flutter中文网 Flutter 常用技巧 命令 flutter create &lt;项目名称&gt; - 新建Flutter项目 flutter run - 运行项目 flutter upgrade - 更新flutter SDK 快捷键 R键： 点击后热加载，直接查看预览效果 P键：在虚拟机中显示网格，工作中常用 O键：切换Android和IOS的预览模式 Q键：退出调试预览模式]]></content>
      <categories>
        <category>前端</category>
        <category>Flutter</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>前端</tag>
        <tag>Flutter</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Dart学习笔记]]></title>
    <url>%2F2019%2F01%2F23%2FDart%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[Dart 开发环境搭建(MacOS)12brew tap dart-lang/dartbrew install dart brew install dart 的时候可能会受网络影响，下载不了sdk或者下载速度过慢，可以将下载链接复制到迅雷中下载，然后解压，解压路径自行创建一个 12345678sudo vim ~/.bash_profile# 用vim编辑~/.bash_profile，将下面的两行代码粘贴到bash_profile里export DART_HOME=/Users/icedream/development/dart-sdk # 这里跟上自己的dart解压路径，比如我的解压在~/developmentexport PATH=$PATH:$DART_HOME/bin:#然后按esc键再按输入:然后输入x保存source ~/.bash_profile 以上为添加dart路径到环境变量，具体操作请先了解vim的使用 Dart数据类型 var 定义变量， const定义常量，final修饰的变量不可改变内置类型： 数值型-Number 字符串-String 布尔型-Boolean 列表-List 键值对-Map Runes、Symbols 变量与常量var 定义变量final 和 const 用final修饰的变量，必须在定义时将其初始化，其值在初始化后不可改变；const用来定义常量。 它们的区别在于，const比final更加严格。final只是要求变量在初始化后值不变，但通过final，我们无法在编译时（运行之前）知道这个变量的值；而const所修饰的是编译时常量，我们在编译时就已经知道了它的值，显然，它的值也是不可改变的。 12345678int Func() &#123; // 代码&#125;final int m1 = 60;final int m2 = Func(); // 正确const int n1 = 42;const int n2 = Func(); // 错误 在上面的例子中，m2的值是不变的，但如果不把代码运行起来，你无法知道m2是多少。 为了更好的理解，我们提供一个中学数学中的例子。 设常数a&gt;0，在实数范围内解关于x的不等式：ax + 1/x &gt; 4。 在这个题目中，a是一个常数，但你不知道a是多少（所以在解题时要分类讨论），这就是Dart中的final。但如果把a改成一个具体的数，比如4、46、100等，那就是const。 数值型num:12num a = 10;a = 12.5; //number类型可以随意修改变量的值为任意数值型 int:12int b = 20;// b = 20.5; int类型变量只能为整数 double:12double c = 20.5;// c = 30; double类型只能为浮点型 常用属性：​ isNaN(非数值型)、isEven(偶数)、isOdd(基数)等 常用方法:​ abs() 取绝对值、round() 四舍五入 、floor()取最小、ceil()取最大、toInt()转整型、toDouble转浮点型 字符串字符串的创建使用单引号，双引号创建字符串12String str1 = 'Hello';String str2 = "hello"; 使用三引号创建多行字符串12345678String str3 = """DartIsMyFavoriteLanguage""";String str4="It's\nJust\nA\nJoke"; // i like Python more (^v^) 使用r创建原始raw字符串1String str5 = r"It's\nJust\nA\nJoke" // It's\nJust\nA\nJoke 字符串操作运算符: +、*、==、[]1234567String str1 = 'Hello';String str2 = 'World';print(str1 + str2); // HelloWorldprint(str1 * 5);// HelloHelloHelloHelloHelloprint(str1 == str2); // falseprint(str1 == 'Hello'); // trueprint(str1[0]); // H 插值表达式: ${expression}1234int a = 1;int b = 2;print('a + b = $&#123;a + b&#125;'); // a + b = 3print('a = $a'); // a = 1 常用属性：length、isEmpty、isNotEmpty1234String str1 = 'Hello';print(str1.length); // 5print(str1.isEmpty); // falseprint(str1.isNotEmpty); // true 常用方法contains(),substring()123String str1 = 'HelloWorld';print(str1.contains("Hello")); //trueprint(str1.substring(0, 3)); //Hel startsWith(),endsWith()123String str1 = 'HelloWorld';pritn(str1.startsWith('H')); //trueprint(str1.endsWith('l')); //false indexOf(), lastIndexOf()12345String str1 = 'HelloWorld';print(str1.indexOf('W')); //5print(str1.lastIndexOf('W')); //5print(str1.indexOf('k')); //-1print(str1.lastIndexOf('k')); //-1 indexOf: HelloW 012345 - 5lastIndexOf: dlroW 98765 - 5 toLowerCase(), toUpperCase()123String str1 = 'HelloWorld';print(str1.toLowerCase()); // hellowroldprint(str1.toUpperCase()); // HELLOWROLD trim(), trimLeft(), trimRight()1234String str5 = ' hello ';print(str5.trim()); //helloprint(str5.trimLeft());//hello print(str5.trimRight());// hello split(), replaceXXX()12345String str6 = 'This is my favorite language';print(str6.split(' ')); // [This, is, my, favorite, language]print(str6.replaceAll('This', 'that'));// that is my favorite languageprint(str6.replaceFirst('T', 'h'));// hhis is my favorite languageprint(str6.replaceRange(0, 6, '*'));//*s my favorite language 布尔型 使用bool标识布尔类型， 布尔值只有true和false 12bool isTrue = true;bool isFalse = false; 列表（List） 在Dart中 list和其他语言中的数组是同一个概念 List 创建创建List：1var list = [1,2,3,true,'Dart',1.2]; 创建不可变的List：1var list = const[1,2,3]; 构造：1var list = new List(); 常用操作[],length123var list = [1,2,3,true,'Dart',1.2];print(list[0]); // 1print(list.length);// 6 add(),insert()123var list = [1,2,3];list.add(6); // [1,2,3,6]list.insert(1, 0); //[1,0,2,3,6] remove(),clear()123var list = [1,2,3];list.remove(2); //[1,3]list.clear(); //[] indexOf(),lastIndexOf()1234var list = [1,2,3];print(list.indexOf(2)); //1print(list.lastindexOf(2)); //1print(list.indexOf(5)); //-1 sort(),sublist()1234var list = [3,2,4,1];list.sort();print(list); //[1, 2, 3, 4]print(list.sublist(1)); //[2,3,4] sort 默认从小到大排序，如果是字符串则会根据每个字符的ASCII码来排序 shuffle(),asMap(),forEach()12345var list = [1,2,3,4];list.shuffle();//对列表随机排序print(list); //[3,2,4,1]list.forEach(print); //1 2 3 4print(list.asMap());//&#123;0: 1, 1: 2, 2: 3&#125; asMap 会把列表的下标作为key，列表对应下标的值作为value MapMap创建创建Map：1var language = &#123;'first': 'Python', 'second': 'Dart'&#125;; 创建不可变Map：1var language = const &#123;'first': 'Python', 'second': 'Dart'&#125;; 构造:1var language = new Map(); 常用操作[],length123var map = &#123;'first': 'Python', 'second': 'Dart'&#125;;print(map['first']);//Pythonprint(map.length);//2 isEmpty(),isNotEmpty()123var map = &#123;'first': 'Python', 'second': 'Dart'&#125;;print(map.isEmpty);//falseprint(map.isNotEmpty);//true Keys, values123var map = &#123;'first': 'Python', 'second': 'Dart'&#125;;print(map.keys);//(first, second)print(map.values);//(Python, Dart) containsKys(),containsValue()123var map = &#123;'first': 'Python', 'second': 'Dart'&#125;;print(map.containsKey('first'));//trueprint(map.caontainsValue('Java'));//false remove()123var map = &#123;'first': 'Python', 'second': 'Dart'&#125;;map.remove('first');print(map);//&#123;second: Dart&#125; forEach()123456var map = &#123;'first': 'Python', 'second': 'Dart'&#125;;map.forEach((key, value)&#123; print('Key: $key, value: $value');&#125;);//Key: first, value: Python//Key: second, value: Dart Dynamic1234567891011var a = 1;a = '2';a = 'dart';dynamic b = 2;b = 'dart';var list = new List&lt;dynamic&gt;();list.add(1);list.add('dart');list.add(true) dynamic 在定义变量时 var = dynamic 都是创建弱变量，当创建列表时可以指定为泛型 Dart运算符算数运算符加减乘除整除求余: +、-、*、/、~/、%123456789int a = 10;int b = 2;print(a + b);//12print(a - b);//8print(a * b);//20print(a / b);//5.0print(a ~/ b);//5print(a % b);//0 递增递减: ++var, var++, –var, var–1234567int a = 10;print(a++);//10 此处为先打印a的值再自增 打印时的值为10 打印完了后自增为11print(++a);//12 先自增再答应print(a--);//12 此处为先打印a的值再自减 打印时的值为12 打印完了后自减为11print(--a);//10 先自减再打印 关系运算符: ==, !=, &gt;, &lt;, &gt;=, &lt;=12345678910111213141516int a = 3;int b = 2;print(a == b);//falseprint(a != b);//trueprint(a &gt; b);//trueprint(a &lt; b);//falseprint(a &gt;= b);//trueprint(a &lt;= b);//falseprint(2 &gt;= 2);//trueString str1 = '123';String str2 = '456';String str3 = '123';print(str1 == str2);//falseprint(str1 == str3);//true 逻辑运算符: !, &amp;&amp;, ||123456bool isTrue = true;bool isFalse = false;print(!isTrue); //falseprint(isTrue &amp;&amp; isFalse); //falseprint(isTrue || isFalse); //true &amp;&amp; 两边都为true才是true , || 两边都为false才是false 赋值运算符基础运算符： =, ??=123456int a = 10;int b;int c = 5;print(b ??= a); // 10print(c ??= a); //5// ??= 左边的有值就用左边的值，左边的没有值就用右边的值 复合运算符: +=, -=, *=, /=, %=, ~/=12345678int a = 10;print(a += 2);//等于 a = a + 2 a = 12print(a -= 2);//等于 a = a - 2 a = 10print(a *= 2);//等于 a = a * 2 a = 20double b = 10.0;print(b /= 2);//等于 b = b / 2 b = 5.0print(a %= 3);//等于 a = a % 3 a = 2print(a ~/= 1);//等于 a = a ~/ 1 a = 2 条件表达式三目运算符: condition ? expr1 : expr212int gender = 0;print(gender == 0 ? "Male":"Female"); // Male ?? 运算符: expr1 ?? expr212345678String a = 'Java';String b = 'Dart';String c;b = b ?? a;print(b); // Dartc = c ?? a;print(c); // Java Dart控制语句If 语句1234567891011121314int score = 90;if (score &gt;= 90)&#123; if (score == 100)&#123; print("超神"); &#125;else&#123; print("优秀"); &#125;&#125;else if (score &gt;= 80)&#123; print("良好");&#125;else if (score &gt;= 60)&#123; print("及格");&#125;else&#123; print("太菜");&#125; For 循环123456789var list = [1,2,3];for (var i = 0; index &lt; list.length; i++)&#123; print(list[index]);&#125;for (var item in list)&#123; print(item);&#125; 以上两种for 循环打印结果都一样 While 循环12345678int count = 0;while (count &lt; 5)&#123; print(++count);&#125;//count = 5do&#123; print(--count); //count = 4&#125;while(count &gt; 0 &amp;&amp; count &lt; 4); // 判断count不小于4不继续循环 continue 和 break12345678910111213141516var list = [1,2,3];for (var item in list)&#123; if (item == 2)&#123; break; &#125; print(item);&#125;// 1for (var item in list)&#123; if (item == 2)&#123; continue; &#125; print(item);&#125;// 1 3 在循环中 break跳出循环，循环语句不再执行， continue跳出当次循环后，循环语句继续执行 Switch…case 语句 在dart中，switch语句非空case内必须有一个break，支持continue跳转标签 12345678910111213141516171819202122232425262728293031String language = 'Java';switch(language)&#123; case 'Java': print('Java is my favorite language'); break; case 'Python': print('Python is my favorite language'); break; case 'Dart': print('Dart is my favorite language'); break; default: print('No language i like');&#125;// Java is my favorite languageswitch(language)&#123; case 'Java': print('Java is my favorite language'); continue Tag; case 'Python': print('Python is my favorite language'); break; Tag: case 'Dart': print('Dart is my favorite language'); break; default: print('No language i like');&#125;// Java is my favorite language// Dart is my favorite language Dart 中的方法方法的定义 返回类型 方法名 (参数1，参数2…){ ​ 方法体… ​ return 返回值 } 123456void main(List args)&#123; print(args)&#125;// 在终端执行 dart 代码文件名 args// 比如 dart main.dart 1 '2' true 则会打印 [1, '2', true] 方法的特性方法也是对象，并且类型是Function 返回值类型、参数类型都可以省略 123printMan(name, age)&#123; return "name: $name, age: $age";&#125; 箭头语法： =&gt; expr 是 {return expr;} 的缩写。只适用于一个表达式 1printMan(name, age) =&gt; "name: $name, age: $age" 方法都有返回值。如果没有指定返回值则会自动帮我们 return null; 123456789void main()&#123; print(printMan("张三", 18)); // name: 张三, age: 18 // null&#125;printMan(name, age)&#123; print("name: $name, age: $age");&#125; 可选参数123456789101112131415161718192021222324void main() &#123; printMan("张三"); printMan("张三", age: 18); printMan("张三", age: 18, gender: "Male"); printMan2("王五"); printMan2("王五", 28); printMan2("王五", 28, "Female");&#125;printMan(name, &#123;age, gender&#125;)&#123; print("name: $name, age: $age, gender: $gender");&#125;printMan2(name, [age, gender])&#123; print("name: $name, age: $age, gender: $gender");&#125;//name: 张三, age: null, gender: null//name: 张三, age: 18, gender: null//name: 张三, age: 18, gender: Male//name: 王五, age: null, gender: null//name: 王五, age: 28, gender: null//name: 王五, age: 28, gender: Female 可选参数 可选参数必须放在后面 {} 花括号定义可选命名参数可根据参数名来传参 [] 中括号定义可选位置参数只可以按定义顺序传参 默认参数值12345678910111213void main() &#123; printMan("张三"); printMan("张三", age: 18); printMan("张三", age: 18, gender: "Male");&#125;printMan(name, &#123;age=33, gender="Female"&#125;)&#123; print("name: $name, age: $age, gender: $gender");&#125;//name: 张三, age: 33, gender: Female//name: 张三, age: 18, gender: Female//name: 张三, age: 18, gender: Male 默认参数值 使用 = 在可选参数指定默认值 默认值只能是编译时常量 方法对象123456789101112131415161718void main() &#123; Function doubleP = doublePrint; // 可以将一个方法赋值给Function类型的变量 var ddprint = doubleP; // 也可以赋值给一个弱变量 ddprint('hello'); //然后调用变量名() 来调用方法 var list = ['1','2','3','4']; list.forEach(doubleP);// 也可以将方法作为参数传递给其他方法&#125;doublePrint(item)&#123; print(item * 2);&#125;//hellohello//11//22//33//44 匿名方法匿名方法的定义 (参数1, 参数2…){ 方法体… return 返回值} 123(name)&#123; print(name);&#125;; 匿名方法的特性可赋值给变量，通过变量进行调用1234567var func = (name)&#123; print("my name is $name");&#125;;func("张三");// my name is 张三 可在其他方法中直接调用或传递给其他方法123456789var list = ['1','2','3','4'];list.forEach((item)&#123; print(item * 2);&#125;);//11//22//33//44 有一种特殊的自调用方式，但是不推荐使用12345void main() &#123; ((name)&#123; print(name); // 张三 &#125;)("张三");&#125; 闭包1234567891011121314151617void main()&#123; var func = closure(); func(); func(); func();&#125;closure()&#123; int a = 0; return ()&#123; print(++a); &#125;;&#125;//1//2//3 闭包是一个方法(对象) 闭包定义在其他方法内部 闭包能够访问外部方法内的局部变量,并持有其状态]]></content>
      <categories>
        <category>前端</category>
        <category>Dart</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>前端</tag>
        <tag>Dart</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Flask高级编程学习笔记]]></title>
    <url>%2F2019%2F01%2F22%2FFlask%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[Flask 的”controller”在flask中有基于函数的 视图函数 和基于类的 即插视图 视图函数其实就是一个普通的函数，只不过在flask当中的视图函数是用来控制View视图的函数，所以叫做视图函数 即插视图基于类，可以用面向对象模式来编码，且视图之间可以继承，提高代码服用 Flask 0.7 引入了即插视图，灵感来自 Django 的基于类而不是函数的通用视图。 其主要目的是让你可以对已实现的部分进行替换，并且这个方式可以定制即插视图。 Flask 的唯一URL123@app.route('/index')def index(): return 'Hello Wrold!' 当URL路由设置为 /index的时候只能通过 ip:port/index 访问 如果加上一个斜杠 /index/ 则会404 123@app.route('/index/')def index(): return 'Hello Wrold!' 如果路由设置为 /index/ 且没有 /index的路由，则URL不符合唯一性此时 无论是/index 还是 /index/ 都能指向到index() 视图函数, 当路由是/index时会重定向到/index/ Flask 路由注册123@app.route('/index')def index(): return 'Hello Wrold!' Flask 可以使用装饰器来注册路由, 通常就推荐使用这种方式注册路由，因为看起来优雅美观，而且编码也简单易懂 1234def index(): return 'Hello Wrold!'app.add_url_rule('/index', view_func=index) Flask 也可以通过add_url_rule方法来注册路由， 当使用即插视图的时候一般才会使用这种方式来注册路由 Python Flask 装饰器注册路由其实就是把add_url_rule进行的封装让帮我们通过装饰器来自己调用add_url_rule 1234567# Flask route装饰器的实现 def route(self, rule, **options): def decorator(f): endpoint = options.pop('endpoint', None) self.add_url_rule(rule, endpoint, f, **options) #Flask 自己调用 return f return decorator Flask 配置文件载入12# config 配置文件内容DEBUG = True 12app.config.from_object('config')print(app.config['DEBUG']) # 结果为 True， 如果把config中的DEBUG变小写 则为app.config的默认值False app.config 本身就是一个字典对象，且拥有自己的默认值，当app.config.from_object(‘config’)的时候只会读取全部大写的配置，比如只读取DEBUG而不能读取Debug 123456789101112131415161718192021222324252627282930313233&gt; # Flask 的 默认config值&gt; default_config = ImmutableDict(&#123;&gt; 'ENV': None,&gt; 'DEBUG': None,&gt; 'TESTING': False,&gt; 'PROPAGATE_EXCEPTIONS': None,&gt; 'PRESERVE_CONTEXT_ON_EXCEPTION': None,&gt; 'SECRET_KEY': None,&gt; 'PERMANENT_SESSION_LIFETIME': timedelta(days=31),&gt; 'USE_X_SENDFILE': False,&gt; 'SERVER_NAME': None,&gt; 'APPLICATION_ROOT': '/',&gt; 'SESSION_COOKIE_NAME': 'session',&gt; 'SESSION_COOKIE_DOMAIN': None,&gt; 'SESSION_COOKIE_PATH': None,&gt; 'SESSION_COOKIE_HTTPONLY': True,&gt; 'SESSION_COOKIE_SECURE': False,&gt; 'SESSION_COOKIE_SAMESITE': None,&gt; 'SESSION_REFRESH_EACH_REQUEST': True,&gt; 'MAX_CONTENT_LENGTH': None,&gt; 'SEND_FILE_MAX_AGE_DEFAULT': timedelta(hours=12),&gt; 'TRAP_BAD_REQUEST_ERRORS': None,&gt; 'TRAP_HTTP_EXCEPTIONS': False,&gt; 'EXPLAIN_TEMPLATE_LOADING': False,&gt; 'PREFERRED_URL_SCHEME': 'http',&gt; 'JSON_AS_ASCII': True,&gt; 'JSON_SORT_KEYS': True,&gt; 'JSONIFY_PRETTYPRINT_REGULAR': False,&gt; 'JSONIFY_MIMETYPE': 'application/json',&gt; 'TEMPLATES_AUTO_RELOAD': None,&gt; 'MAX_COOKIE_SIZE': 4093,&gt; &#125;)&gt;]]></content>
      <categories>
        <category>后端</category>
        <category>Flask</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>笔记</tag>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[React环境搭建]]></title>
    <url>%2F2019%2F01%2F03%2FReact%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[React 编程环境的搭建，node js 的安装 react脚手架工具的安装 Node.js 安装配置 安装包下载 下载地址: https://nodejs.org/zh-cn/download/windows和mac推荐图中框起来的位置下载，windows根据系统版本下载具体怎么查看32位还是64位的请自行百度。 安装Windows一路下一步安装就可以Mac双击pkg包安装 使用国内镜像源 12npm config set registry https://registry.npm.taobao.org --globalnpm config set disturl https://npm.taobao.org/dist --global 因为npm的服务器架设在国外，国内访问速度有时候实在让人伤感~ React 脚手架安装1234npm install -g create-react-app # npm 安装create-react-appcreate-create-app &lt;你的项目名&gt; # 比如 create-create-app my-app cd &lt;你的项目名&gt; # 切换到项目根目录npm start # 启动项目 npm 部分常用命令： install - 安装命令 -g 参数 - 全局安装 –save 参数 - 保存到项目包中 npm -v 查看npm版本号 npm install 安装报错可以尝试加上管理员权限： Windows 右键管理员身份运行cmd 或 powershell 、 Mac 加上sudo命令，感兴趣的可以了解一下 yarn 包管理工具；]]></content>
      <categories>
        <category>前端</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[创建时间]]></title>
    <url>%2F2019%2F01%2F01%2Fhello-world%2F</url>
    <content type="text"><![CDATA[欢迎来到我的博客，博客创建于2019-1-1]]></content>
  </entry>
</search>
